using KomodoRpcClient.Api.Types;

namespace KomodoRpcClient.Api.Defaults
{
	public partial class DefaultApi
	{
		public static Module GetDefaultBlockchainModule ( )
		{
			var methods = new[]
			{
				new Method ( "coinsupply",
							 "Returns the coin supply information for the indicated block height",
							 Numeric ( "height", "Desired block height", true ) ),
				new Method ( "getbestblockhash",
							 "Returns the hash of the best (tip) block in the longest block chain" ),
				new Method ( "getblock",
							 "Returns the block's relevant state information",
							 String ( "hash", "Block hash" ) ),
				new Method ( "getblockchaininfo",
							 "Returns a json object containing state information about blockchain processing" ),
				new Method ( "getblockcount",
							 "Returns the number of blocks in the best valid block chain" ),
				new Method ( "getblockhash",
							 "Returns the hash of the indicated block index, according to the best blockchain at the time provided",
							 Numeric ( "index", "Block index" ) ),
				new Method ( "getblockhashes",
							 "Returns an array of hashes of blocks within the timestamp range provided",
							 Numeric ( "high", "Newer block timestamp" ),
							 Numeric ( "low", "Older block timestamp" ),
							 Object ( Bool ( "noOrphans", "Only include blocks on main chain", true ),
									  Bool ( "logicalTimes", "Only include timestamps with hashes", true ) ) ),
				new Method ( "getblockheader",
							 "Returns information about the indicated block",
							 String ( "hash", "Block hash" ) ),
				new Method ( "getchaintips",
							 "Returns information about all known tips in the block tree, including the main chain and any orphaned branches" ),
				new Method ( "getchaintxstats",
							 "Returns statistics about the total number and rate of transactions in the chain",
							 Numeric ( "nblocks", "Number of blocks in averaging window", true ),
							 String ( "blockhash", "Hash of last block", true ) ),
				new Method ( "getdifficulty",
							 "Returns the proof-of-work difficulty as a multiple of the minimum difficulty" ),
				new Method ( "getlastsegidstakes",
							 "Returns an object containing the number of blocks staked by each segid in the last X number of blocks, where the value of X is equal to the indicated depth",
							 Numeric ( "depth", "Number of blocks to scan" ) ),
				new Method ( "getmempoolinfo",
							 "Returns details on the active state of the transaction memory pool" ),
				new Method ( "getrawmempool",
							 "Returns all transaction ids in the memory pool as a json array of transaction ids" ),
				new Method ( "getspentinfo",
							 "Returns the transaction id and index where the given output is spent",
							 Object ( String ( "txid", "Hex string of transaction ID" ),
									  Numeric ( "index", "Output index" ) ) ),
				new Method ( "gettxout",
							 "Returns details about an unspent transaction output",
							 String ( "txid", "Hex string of transaction ID" ),
							 Numeric ( "vout", "Vout value" ),
							 Bool ( "includemempool", "Whether to include the mempool", true ) ),
				new Method ( "gettxoutproof",
							 "Returns a hex-encoded proof showing that the indicated transaction was included in a block",
							 Array ( "txids", "Transactions IDs",
									 String ( "txid", "Hex string of transaction ID" ) ),
							 String ( "blockhash", "Looks for the relevant transaction id in this block hash",
									  true ) ),
				new Method ( "gettxoutsetinfo",
							 "Returns statistics about the unspent transaction output set" ),
				new Method ( "kvsearch",
							 "Searches for a key stored via the kvupdate command",
							 String ( "key", "Key to search for" ) ),
				new Method ( "kvupdate",
							 "Stores a key/value pair via OP_RETURN",
							 String ( "key", "Key (should be unique)" ),
							 String ( "value", "Value" ),
							 Numeric ( "days", "Days to expire" ),
							 String ( "passphrase", "Pass-phrase required to update this key", true ) ),
				new Method ( "minerids",
							 "Returns information about the notary nodes and external miners at a specific block height",
							 Numeric ( "height", "Block height for the query" ) ),
				new Method ( "notaries",
							 "Returns the public key, BTC address, and KMD address for each Komodo notary node",
							 Numeric ( "height", "Block height for the query" ),
							 Numeric ( "timestamp", "Timestamp of the block" ) ),
				new Method ( "verifychain",
							 "Verifies the coin daemon's blockchain database",
							 Numeric ( "checklevel", "Thoroughness of block verification", true ),
							 Numeric ( "numblocks", "Number of blocks to verify", true ) ),
				new Method ( "verifytxoutproof",
							 "Verifies that a proof points to a transaction in a block. It returns the transaction to which the proof is committed, or it will throw an RPC error if the block is not in the current best chain",
							 String ( "proof_string", "Hex-encoded proof generated by gettxoutproof" ) )
			};

			return new Module ( "Blockchain", methods );
		}
	}
}